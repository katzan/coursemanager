// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.katz.coursemanager.model;

import com.katz.coursemanager.model.CourseDataOnDemand;
import com.katz.coursemanager.model.Registration;
import com.katz.coursemanager.model.RegistrationDataOnDemand;
import com.katz.coursemanager.model.StudentDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect RegistrationDataOnDemand_Roo_DataOnDemand {
    
    declare @type: RegistrationDataOnDemand: @Component;
    
    private Random RegistrationDataOnDemand.rnd = new SecureRandom();
    
    private List<Registration> RegistrationDataOnDemand.data;
    
    @Autowired
    CourseDataOnDemand RegistrationDataOnDemand.courseDataOnDemand;
    
    @Autowired
    StudentDataOnDemand RegistrationDataOnDemand.studentDataOnDemand;
    
    public Registration RegistrationDataOnDemand.getNewTransientRegistration(int index) {
        Registration obj = new Registration();
        setAttended(obj, index);
        setPaymentMade(obj, index);
        return obj;
    }
    
    public void RegistrationDataOnDemand.setAttended(Registration obj, int index) {
        Boolean attended = true;
        obj.setAttended(attended);
    }
    
    public void RegistrationDataOnDemand.setPaymentMade(Registration obj, int index) {
        Boolean paymentMade = true;
        obj.setPaymentMade(paymentMade);
    }
    
    public Registration RegistrationDataOnDemand.getSpecificRegistration(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Registration obj = data.get(index);
        Long id = obj.getId();
        return Registration.findRegistration(id);
    }
    
    public Registration RegistrationDataOnDemand.getRandomRegistration() {
        init();
        Registration obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Registration.findRegistration(id);
    }
    
    public boolean RegistrationDataOnDemand.modifyRegistration(Registration obj) {
        return false;
    }
    
    public void RegistrationDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Registration.findRegistrationEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Registration' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Registration>();
        for (int i = 0; i < 10; i++) {
            Registration obj = getNewTransientRegistration(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
